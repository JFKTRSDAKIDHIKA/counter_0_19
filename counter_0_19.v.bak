module counter_0_19 (
    input wire clk,            // 100Hz系统时钟
    input wire reset,          // BTN7复位信号
    input wire pause,          // BTN0暂停信号
    output reg [6:0] disp1,    // 高位数码管显示
    output reg [6:0] disp0     // 低位数码管显示
);

    reg [4:0] count;           // 5位计数器，计数范围0~19
    reg running;               // 运行状态标志位
    
    // 去抖电路，用于暂停按钮
    wire pause_clean;          
    debounce debounce_pause(.clk(clk), .btn(pause), .btn_clean(pause_clean));
    
    // 初始状态
    initial begin
        count = 5'd0;
        running = 1'b1;        // 默认计数器运行
    end

    // 计数逻辑
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            count <= 5'd0;      // 复位计数器到0
            running <= 1'b1;    // 恢复运行
        end
        else if (pause_clean) begin
            running <= ~running; // 切换运行/暂停状态
        end
        else if (running) begin
            if (count == 5'd19) begin
                count <= 5'd0;  // 计数到19后回到0
            end
            else begin
                count <= count + 5'd1;  // 每秒加1
            end
        end
    end

    // 数码管显示控制逻辑，将计数器值转换为七段显示码
    always @(*) begin
        case (count / 10)
            4'd0: disp1 = 7'b1000000;
            4'd1: disp1 = 7'b1111001;
            // 继续填充其余数字0~9的显示码
            default: disp1 = 7'b1000000;
        endcase
        
        case (count % 10)
            4'd0: disp0 = 7'b1000000;
            4'd1: disp0 = 7'b1111001;
            4'd2: disp0 = 7'b0100100;
            4'd3: disp0 = 7'b0110000;
            4'd4: disp0 = 7'b0011001;
            4'd5: disp0 = 7'b0010010;
            4'd6: disp0 = 7'b0000010;
            4'd7: disp0 = 7'b1111000;
            4'd8: disp0 = 7'b0000000;
            4'd9: disp0 = 7'b0010000;
            default: disp0 = 7'b1000000;
        endcase
    end

endmodule

// 去抖动电路模块
module debounce (
    input wire clk,         // 系统时钟
    input wire btn,         // 原始按钮信号
    output reg btn_clean    // 去抖后的按钮信号
);
    reg [2:0] shift_reg;    // 用于去抖动的移位寄存器

    always @(posedge clk) begin
        shift_reg <= {shift_reg[1:0], btn};  // 将按钮输入移入移位寄存器
        if (shift_reg == 3'b111) begin
            btn_clean <= 1'b1;               // 连续3个周期为高电平，认为稳定按下
        end
        else if (shift_reg == 3'b000) begin
            btn_clean <= 1'b0;               // 连续3个周期为低电平，认为释放
        end
    end
endmodule
